plugins {
    id("java-library")
    id("io.papermc.paperweight.userdev") version "1.3.3"
    id("xyz.jpenilla.run-paper") version "1.0.6" // Adds runServer and runMojangMappedServer tasks for testing
}

import java.nio.charset.StandardCharsets

repositories {
    gradlePluginPortal()
    maven { url = uri("https://libraries.minecraft.net/") }
    maven { url = uri("https://maven.fabricmc.net/") }
    maven { url = uri("https://papermc.io/repo/repository/maven-public/") }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

version = '1.0'

def javaVersion = 17
def charset = StandardCharsets.UTF_8

def ver = [
        major   : "1",
        minor   : "18",
        patch   : "1",
        revision: "0.1",
        tag     : "SNAPSHOT"
]

jar.archiveFileName = "${project.name.toLowerCase()}.${jar.archiveExtension.get()}"


java {
    // Configure the java toolchain. This allows gradle to auto-provision JDK 17 on systems that only have JDK 8 installed for example.
    toolchain.languageVersion.set(JavaLanguageVersion.of(javaVersion))
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:${ver.major}.${ver.minor}.${ver.patch}-R${ver.revision}-${ver.tag}");
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.7.0"
}

test {
    useJUnitPlatform()
    testLogging { // Allow printing in tests
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

tasks {
    assemble { // Invoke reobfJar when building
        dependsOn(reobfJar)
    }

    compileJava.options.release.set(javaVersion)

    javadoc.options.encoding = charset.name()
    compileJava.options.encoding = charset.name()
    processResources.filteringCharset = charset.name()
}
